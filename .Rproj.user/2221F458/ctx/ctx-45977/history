names(res) <- c("test", "p-value", "kappa")
res
u1 <- rvonmises(20, 2.4, 5)
u2 <- rvonmises(20, 2.4, 10)
ina <- rep(1:2, each = 20)
hcfcirc.perm(u1, u2, ina)
u
pi
!rads
(rads)
u1 <- rvonmises(20, 2.4, 5)
u2 <- rvonmises(20, 2.4, 10)
ina <- rep(1:2, each = 20)
hcfcirc.perm(u1, u2, ina)
length(rads)
hcfcirc.perm(u1, u2, rads = TRUE, B = 999)
hetcirc.perm(u1, u2, rads = TRUE, B = 999)
lrcirc.perm(u1, u2, rads = TRUE, B = 999)
embedcirc.perm(u1, u2, rads = TRUE, B = 999)
kapa
kappa
library(Directional)
library(Directional)
u1 <- rvonmises(20, 2.4, 5)
u2 <- rvonmises(20, 2.4, 10)
ina <- rep(1:2, each = 20)
hcfcirc.perm(u1, u2, ina)
library(Directional)
u1 <- rvonmises(20, 2.4, 5)
u2 <- rvonmises(20, 2.4, 10)
ina <- rep(1:2, each = 20)
hcfcirc.perm(u1, u2, ina)
rads = TRUE
B = 999
u <- c(u1, u2)
if ( !rads )  u <- u * pi/180
ina <- c( rep(1, length(u1) ), rep(2, length(u2) ) )
ni <- tabulate(ina)
n <- sum(ni)
x1 <- cos(u)
x2 <- sin(u)
Ci <- Rfast::group(x1, ina)
Si <- Rfast::group(x2, ina)
Ri <- sqrt(Ci^2 + Si^2)
V <- sum(Ri)
C <- sum(Ci)
S <- sum(Si)
R <- sqrt(C^2 + S^2)
lrcirc.perm(u1, u2)
embedcirc.perm(u1, u2)
hetdcirc.perm(u1, u2)
hetcirc.perm(u1, u2)
u1 <- rvonmises(20, 2.4, 5)
u2 <- rvonmises(20, 2.4, 10)
ina <- rep(1:2, each = 20)
hcfcirc.perm(u1, u2, ina)
lrcirc.perm(u1, u2)
u1 <- rvonmises(20, 2.4, 5)
u2 <- rvonmises(20, 2.4, 10)
ina <- rep(1:2, each = 20)
hcfcirc.perm(u1, u2, ina)
lrcirc.perm(u1, u2)
library(Directional)
u1 <- rvonmises(20, 2.4, 5)
u2 <- rvonmises(20, 2.4, 10)
ina <- rep(1:2, each = 20)
hcfcirc.perm(u1, u2, ina)
pi
180
u
u<-c(u1, u2)
rads
source('C:/Users/User/Desktop/Folder/paketo/Directional statistics/Directional/R/hcfcirc.perm.R')
u1 <- rvonmises(20, 2.4, 5)
u2 <- rvonmises(20, 2.4, 10)
ina <- rep(1:2, each = 20)
hcfcirc.perm(u1, u2, ina)
hcfcirc.perm(u1, u2)
library(Directional)
library(Directional)
kmeans
eachcol.apply
library(Rfast)
eachcol.apply
source('~/.active-rstudio-document')
?mix.vmf
k <- runif(4, 4, 20)
prob <- c(0.2, 0.4, 0.3, 0.1)
mu <- matrix(rnorm(16), ncol = 4)
mu <- mu / sqrt( rowSums(mu^2) )
x <- rmixvmf(200, prob, mu, k)$x
a1<-mix.vmf(x, 3)
a2<-mix.vmf2(x,3)
a1
a2
summary(a1)
a1$runtime
a2$runtime
summary(a1)
a1$param
a2$param
a1$pred
a1$runtime
a2$runtime
vmf.mle
vm.mle
purka.mle
Rfast2::purka.mle
glm_logistic
a1
library(Directional)
?dirknn.tune
?Rfast::dirknn.cv
?dirknn.tune
?Rfast::dirknn.cv
Rfast::dirknn.cv
Rfast::dirknn.cv
library(RANN)
nn2
?nn2
Compositional::alfa.knn
dirknn
?dirknn
k <- runif(4, 4, 20)
prob <- c(0.2, 0.4, 0.3, 0.1)
mu <- matrix(rnorm(16), ncol = 4)
mu <- mu / sqrt( rowSums(mu^2) )
da <- rmixvmf(200, prob, mu, k)
nu <- sample(1:200, 180)
x <- da$x[nu, ]
ina <- da$id[nu]
xx <- da$x[-nu, ]
id <- da$id[-nu]
a1 <- dirknn(x, xx, k = 5,  ina, type = "S", mesos = TRUE)
a2 <- dirknn(x, xx, k = 5,ina, type = "NS", mesos = TRUE)
source('~/.active-rstudio-document')
a3 <- dirknn2(x, xx, k = 5,ina, type = "NS", mesos = TRUE, rann=T)
xnew=xx
xnew
x
k
k=5
## Non Standard algorithm
klen <- length(k)
g <- matrix(0, nu, klen)
ta <- matrix(nrow = nu, ncol = nc)
apo <- list()
for (m in 1:nc)  apo[[ m ]] <- RANN::nn2(data = x[ina == m, ], query = xnew, k = max(k) )
nc <- max(ina)  ## The number of groups
for (m in 1:nc)  apo[[ m ]] <- RANN::nn2(data = x[ina == m, ], query = xnew, k = max(k) )
apo
for (m in 1:nc)
apo[[ m ]] <- RANN::nn2(data = x[ina == m, ], query = xnew, k = max(k) )$nn.dists
apo
source('~/.active-rstudio-document')
a2 <- dirknn(x, xx, k = 5,ina, type = "NS", mesos = TRUE)
a3 <- dirknn(x, xx, k = 5,ina, type = "NS", mesos = TRUE,TRUE)
a2
a3
summary(a2)
summary(a3)
sum(a1-a2)
a3 <- dirknn(x, xx, k = 2:10,ina, type = "NS", mesos = TRUE,TRUE)
a2 <- dirknn2(x, xx, k = 2:10,ina, type = "NS", mesos = TRUE,TRUE)
sum(A2-a3)
sum(a2-a3)
a1 <- dirknn(x, xx, k = 2:10,ina, type = "NS", mesos = TRUE)
a2 <- dirknn2(x, xx, k = 2:10,ina, type = "NS", mesos = TRUE,rann=T)
a3 <- dirknn2(x, xx, k = 2:10,ina, type = "NS", mesos = TRUE,rann=F)
sum(a1-a2)
sum(a1-a3)
sum(a2-a3)
a1 <- dirknn(x, xx, k = 2:10,ina, type = "NS", mesos = TRUE,parallel=T)
a2 <- dirknn(x, xx, k = 2:10,ina, type = "NS", mesos = TRUE,parallel=F)
sum(a1-a2)
a1 <- dirknn(x, xx, k = 2:10,ina, type = "NS", mesos = TRUE)
a2 <- dirknn(x, xx, k = 2:10,ina, type = "NS", mesos = TRUE,rann=T)
a2 <- dirknn2(x, xx, k = 2:10,ina, type = "NS", mesos = TRUE,rann=T)
a3 <- dirknn2(x, xx, k = 2:10,ina, type = "NS", mesos = TRUE,rann=F)
sum(a2-a3)
sum(a1-a2)
sum(a1-a3)
a3 <- dirknn2(x, xx, k = 2:10,ina, type = "NS", mesos = TRUE,rann=F)
a1[1:10,]
a3[1:10,]
a3[1:10,]
a1[1:10,]
a3[1:10,]
sum(a1-a3)
sum(a1-a2)
a2
a2 <- dirknn2(x, xx, k = 2:10,ina, type = "NS", mesos = TRUE,rann=T)
for (m in 1:nc)  apo[[ m ]] <- RANN::nn2(data = x[ina == m, ], query = xnew, k = max(k) )$nn.dists
apo
for (m in 1:nc) {
disa <- tcrossprod(x[ina == m, ], xnew)
## no need to compute the acos
#disa[ disa >= 1 ] <- 1
#disa[ disa <=  -1 ] <-  -1
#adisa <- acos(disa)
apo[[ m ]] <-  -Rfast::colSort(disa)[1:max(k), , drop = FALSE]
}
apo
source('~/.active-rstudio-document')
a2 <- dirknn2(x, xx, k = 2:10,ina, type = "NS", mesos = TRUE,rann=T)
a1 <- dirknn(x, xx, k = 2:10,ina, type = "NS", mesos = TRUE)
sum(a1-a2)
for (m in 1:nc)  apo[[ m ]] <- t( RANN::nn2(data = x[ina == m, ], query = xnew, k = max(k) )$nn.dists )
apo
apo2=apo
for (m in 1:nc)  apo2[[ m ]] <- t( RANN::nn2(data = x[ina == m, ], query = xnew, k = max(k) )$nn.dists )
for (m in 1:nc) {
disa <- tcrossprod(x[ina == m, ], xnew)
## no need to compute the acos
#disa[ disa >= 1 ] <- 1
#disa[ disa <=  -1 ] <-  -1
#adisa <- acos(disa)
apo[[ m ]] <-  -Rfast::colSort(disa)[1:max(k), , drop = FALSE]
}
sum(apo[[1]]-apo2[[1]])
ap[[1]]
apo[[1]]
nc
k
apo[[1]]
apo[[1]]
apo[[2]]
apo[[1]]
apo[[1]][,1:5]
apo2[[1]][,1:5]
apo2[[1]][1,]
apo[[1]][1,]
sort(apo[[1]][1,])
sort(apo2[[1]][1,])
disa <- tcrossprod(x[ina == m, ], xnew)
dim(disa)
disa
ina==m
sum(ina==m)
disa[,1]
apo2[[1]][,1]
k=2:17
for (m in 1:nc)  apo2[[ m ]] <- t( RANN::nn2(data = x[ina == m, ], query = xnew, k = max(k) )$nn.dists )
apo2[[1]]
apo2[[1]][1,]
disa[1,]
dim(disa)
disa <- tcrossprod(x[ina == m, ], xnew)
dim(disa)
apo2[[1]][1,]
disa2 <- apo2[[1]]
disa2[1,]
dim(disa2)
disa
disa[1,]
disa[2,]
disa2[1,]
disa[1,]
2-disa2[1,]^2
ddisa
disa2
disa
disa=Rfast::colSort(disa)
disa
disa[,1]
disa2[,1]
2 - 2*disa2[,1]
2 - 2*disa2[,1]^2
1 - *disa2[,1]^2
1 - disa2[,1]^2
disa[,1]
2 - 2*disa2[,1]^2
library(Rfast)
disa=dista(x,xnew)
dim(disa)
disa=dista(xnew,x)
dim(disa)
disa=dista(xnew,x[ina==m,])
m
m=1
disa <- tcrossprod(x[ina == m, ], xnew)
disa
m
disa2 <- t( RANN::nn2(data = x[ina == m, ], query = xnew, k = max(k) )$nn.dists )
disa2
disa=colSort(disa)
dim(xnew)
disa[,1]
disa2[,1]
2-2*disa2[,1]
2-2*disa2[,1]^2
disa[,1]
-Rfast::colSort(disa)[1:max(k), , drop = FALSE]
disa=-Rfast::colSort(disa)[1:max(k), , drop = FALSE]
disa
disa[,1]
disa <- tcrossprod(x[ina == m, ], xnew)
m
disa
disa2
disa3 <- dista(xnew,x[ina==1,])
dim(disa3)
m
disa <- tcrossprod(x[ina == m, ], xnew)
dim(disa)
dim(Xnew)
dim(new)
dim(xnew)
disa3 <- t(dista(xnew,x[ina==1,]) )
dim(disa3)
disa3
disa3 <- colSort(disa3)
disa3
disa
disa
disa3
disa
disa[,1]
disa3[,1]
disa23
disa3
disa3[,1]
disa3[,20]
disa3[,1]
disa3[,1]
disa[,1]
2-2*disa3[,1]^2
2-2*disa3[,1]
2-2*disa[,1]
2-2*disa[,1]^2
disa3[,1]
dista
disa3 <- t(dista(xnew,x[ina==1,]), suare=T,trans=T )
disa3 <- t(dista(xnew,x[ina==1,]), square=T,)
disa3 <- t(dista(xnew,x[ina==1,], square=T))
dim(disa3)
disa3 <- colSort(disa3)
disa3[,1]
2 - 2*disa3[,1]
disa <- tcrossprod(x[ina == m, ], xnew)
disa
-Rfast::colSort(disa)[1:max(k), , drop = FALSE]
Rfast::colmeans( apo[[ m ]][1:k[j], , drop = FALSE] )
j=3
Rfast::colmeans( apo[[ m ]][1:k[j], , drop = FALSE] )
disa[1:3,]
disa[1:3,1:3]
disa
disa <- tcrossprod(x[ina == m, ], xnew)
-Rfast::colSort(disa)[1:max(k), , drop = FALSE]
disa <- -Rfast::colSort(disa)[1:max(k), , drop = FALSE]
colmeans(disa)[1:3,1:4]
colmeans(disa[1:3,1:4])
disa[1:3,1:4]
disa2 <- Rfast::colSort(-disa)[1:max(k), , drop = FALSE]
disa[1:3,1:4]
disa2[1:3,1:4]
disa2
disa2[1,]
disa2[,1]
disa[,1]
sum(abs(disa-disa2))
disa2[,2]
disa[,2]
sum(abs(disa)-abs(disa2))
Rfast::colSort(-disa)[1:max(k), , drop = FALSE]
disa=Rfast::colSort(-disa)[1:max(k), , drop = FALSE]
disa[,1:2]
disa <- tcrossprod(x[ina == m, ], xnew)
disa
disa[,1:2]
m
disa
dim(disa)
Rfast::colSort(-disa)[1:max(k), , drop = FALSE]
disa1=Rfast::colSort(-disa)[1:max(k), , drop = FALSE]
disa1=-Rfast::colSort(disa)[1:max(k), , drop = FALSE]
disa2=Rfast::colSort(-disa)[1:max(k), , drop = FALSE]
disa1[1:10,1:3]
disa21[1:10,1:3]
disa2[1:10,1:3]
## no need to compute the acos
#disa[ disa >= 1 ] <- 1
#disa[ disa <=  -1 ] <-  -1
#adisa <- acos(disa)
apo[[ m ]] <- Rfast::colSort(-disa)[1:max(k), , drop = FALSE]
library(Directional)
?dirknn
k <- runif(4, 4, 20)
prob <- c(0.2, 0.4, 0.3, 0.1)
mu <- matrix(rnorm(16), ncol = 4)
mu <- mu / sqrt( rowSums(mu^2) )
da <- rmixvmf(200, prob, mu, k)
nu <- sample(1:200, 180)
x <- da$x[nu, ]
ina <- da$id[nu]
xx <- da$x[-nu, ]
id <- da$id[-nu]
a1 <- dirknn(x, xx, k = 5,  ina, type = "S", mesos = TRUE)
a2 <- dirknn(x, xx, k = 5,ina, type = "NS", mesos = TRUE)
library(Directional)
a1 <- dirknn(x, xx, k = 5,  ina, type = "S", mesos = TRUE)
a2 <- dirknn(x, xx, k = 5,ina, type = "NS", mesos = TRUE)
a1 <- dirknn(x, xx, k = 5:10,  ina, type = "S", mesos = TRUE)
a2 <- dirknn(x, xx, k = 5:10,  ina, type = "S", mesos = TRUE,rann = T)
sum(a1-a2)
a2 <- dirknn(x, xx, k = 5:10,  ina, type = "NS", mesos = TRUE,rann = T)
a1 <- dirknn(x, xx, k = 5:10,  ina, type = "NS", mesos = TRUE,rann = F)
sum(a1-a2)
dirknn.cv
Rfast::dirknn.cv
Rfast::colSort
dista
library(Rfast)
dista
RANN::nn2
dista
source('C:/Users/User/Desktop/Folder/paketo/Directional statistics/Directional/R/cosnn.R')
?Compositional::alfann
library(Directional)
cosnn
?cosnn
library(Directional)
library(Directional)
Rfast::colSort
x=matrnorm(10,4)
colsort(-x)
colSort(-x)
colSort(x,descending = T)
library(Directional)
library(Directional)
rvmf(n, mu, k)
Rfast::rvmf(n, mu, k)
Rfast::rvmf
mu=c(0,0,0,1)
k=4
rotation <- function(a, b) {
p <- length(a)
ab <- sum(a * b)
ca <- a - b * ab
ca <- ca/sqrt(sum(ca^2))
A <- b %*% t(ca)
A <- A - t(A)
theta <- acos(ab)
diag(p) + sin(theta) * A + (cos(theta) - 1) * (b %*%
t(b) + ca %*% t(ca))
}
d <- length(mu)
(k > 0)
mu <- mu/sqrt(sum(mu^2))
ini <- c(numeric(d - 1), 1)
d1 <- d - 1
v1 <- Rfast::matrnorm(n, d1)  ##  matrix( RcppZiggurat::zrnorm(n * d1), ncol = d1 )
v <- v1 / sqrt( Rfast::rowsums(v1^2) )
b <- (-2 * k + sqrt(4 * k^2 + d1^2))/d1
x0 <- (1 - b)/(1 + b)
m <- 0.5 * d1
ca <- k * x0 + (d - 1) * log(1 - x0^2)
w <- .Call("Rfast_rvmf_h", PACKAGE = "Rfast", n, ca,
d1, x0, m, k, b)
S <- cbind(sqrt(1 - w^2) * v, w)
n=1000
mu <- mu/sqrt(sum(mu^2))
ini <- c(numeric(d - 1), 1)
d1 <- d - 1
v1 <- Rfast::matrnorm(n, d1)  ##  matrix( RcppZiggurat::zrnorm(n * d1), ncol = d1 )
v <- v1 / sqrt( Rfast::rowsums(v1^2) )
b <- (-2 * k + sqrt(4 * k^2 + d1^2))/d1
x0 <- (1 - b)/(1 + b)
m <- 0.5 * d1
ca <- k * x0 + (d - 1) * log(1 - x0^2)
w <- .Call("Rfast_rvmf_h", PACKAGE = "Rfast", n, ca,
d1, x0, m, k, b)
S <- cbind(sqrt(1 - w^2) * v, w)
S
rotation(ini, mu)
ini
mu
ini-mu
if ( sum(ini - mu) != 0 ) {
A <- rotation(ini, mu)
x <- tcrossprod(S, A)
} else x <- S
Rfast::vmf.mle(x)
Directional::rotation
library(Directional)
k <- runif(2, 4, 20)
prob <- c(0.4, 0.6)
mu <- matrix( rnorm(6), ncol = 3 )
mu <- mu / sqrt( rowSums(mu^2) )
x <- rmixvmf(200, prob, mu, k)$x
mod <- mix.vmf(x, 2)
y <- euclid.inv(x)
mixvmf.contour(y, mod)
mod
mod$param
a <- list()
a[[ 1 ]] <- cbind(mu, k, prob)
a
names(a[[1]]) = "param"
a
names(a) = "param"
a
a <- list()
a[[ 1 ]] <- cbind(mu, k, prob)
a
names(a) = "param"
a
a <- list()
a[[ 1 ]] <- cbind(mu, k, prob)
names(a) <- "param"
mixvmf.contour(y=NULL, mod)
