#-------------------------------------------------------------------
rcardioid <- function(n, mu, rho) {
#-------------------------------------------------------------------
if (rho == 0) {
cardrn <- runif(n, 0, 2*pi)
return(cardrn)
}
else if (rho > 0) {
cardrn <- 0
u <- runif(n,0,1) ; psi <- runif(n,0,2*pi) ; ppsi <- (1+2*rho*cos(psi))/2
for (i in 1:n) {
if (u[i] <= ppsi[i]) {
cardrn[i] <- psi[i]
} else if (u[i] > ppsi[i]) {
if (psi[i] <= pi) {
cardrn[i] <- pi-psi[i]
} else if (psi[i] > pi) {
cardrn[i] <- 3*pi-psi[i]
}}
}
cardrn <- (mu+cardrn) %% (2*pi)
return(cardrn)
}
source("~/GitHub/Directional/R/cardio.mle.R")
#-------------------------------------------------------------------
rcardioid <- function(n, mu, rho) {
#-------------------------------------------------------------------
if (rho == 0) {
cardrn <- runif(n, 0, 2*pi)
return(cardrn)
}
else if (rho > 0) {
cardrn <- 0
u <- runif(n,0,1) ; psi <- runif(n,0,2*pi) ; ppsi <- (1+2*rho*cos(psi))/2
for (i in 1:n) {
if (u[i] <= ppsi[i]) {
cardrn[i] <- psi[i]
} else if (u[i] > ppsi[i]) {
if (psi[i] <= pi) {
cardrn[i] <- pi-psi[i]
} else if (psi[i] > pi) {
cardrn[i] <- 3*pi-psi[i]
}}
}
cardrn <- (mu+cardrn) %% (2*pi)
return(cardrn)
}
}
x=rcardioid(1000,2,0.3)
cardio.mle(x)
cardio.mle(x)
cardio.mle(x,T)
source("~/GitHub/Directional/R/cardio.mle.R")
cardio.mle(x,T)
x=rcardioid(1000,-2,0.3)
cardio.mle(x,T)
x <- rcardioid(1000, -2, 0.3)
mod <- cardio.mle(x, T)
if ( mod$param[2] < 0 ) {
mu <- mod$param[1] + pi ;  rho <- abs( mod$param[2] )
}
n <- length(x)
- sum( log1p( 2 * rho * cos(x - mu) ) ) - n * log(2 * pi)
mod
mu
x
mod
mu
rho
x <- rcardioid(1000, -3, 0.3)
mod <- cardio.mle(x, T)
if ( mod$param[2] < 0 ) {
mu <- mod$param[1] + pi ;  rho <- abs( mod$param[2] )
}
n <- length(x)
- sum( log1p( 2 * rho * cos(x - mu) ) ) - n * log(2 * pi)
mod
x <- rcardioid(1000, 3, 0.3)
mod <- cardio.mle(x, T)
mod
if ( mod$param[2] < 0 ) {
mu <- mod$param[1] + pi ;  rho <- abs( mod$param[2] )
}
n <- length(x)
- sum( log1p( 2 * rho * cos(x - mu) ) ) - n * log(2 * pi)
x <- rcardioid(1000, 3, 0.3)
mod <- cardio.mle(x, T)
mod
mu <- mod$param[1] ;  rho <- mod$param[2]
if ( mod$param[2] < 0 ) {
mu <- mod$param[1] + pi ;  rho <- abs( mod$param[2] )
}
n <- length(x)
- sum( log1p( 2 * rho * cos(x - mu) ) ) - n * log(2 * pi)
source("~/GitHub/Directional/R/cardio.mle.R")
x <- rcardioid(1000, 3, 0.3)
mod <- cardio.mle(x, T)
mod
mu <- mod$param[1] ;  rho <- mod$param[2]
if ( mod$param[2] < 0 ) {
mu <- mod$param[1] + pi ;  rho <- abs( mod$param[2] )
}
n <- length(x)
- sum( log1p( 2 * rho * cos(x - mu) ) ) - n * log(2 * pi)
x <- rcardioid(1000, 3, 0.3)
mod <- cardio.mle(x, T)
mod
mu <- mod$param[1] ;  rho <- mod$param[2]
if ( mod$param[2] < 0 ) {
mu <- mod$param[1] + pi ;  rho <- abs( mod$param[2] )
}
n <- length(x)
sum( log1p( 2 * rho * cos(x - mu) ) ) - n * log(2 * pi)
x <- rcardioid(1000, -3, 0.3)
mod <- cardio.mle(x, T)
mod
mu <- mod$param[1] ;  rho <- mod$param[2]
if ( mod$param[2] < 0 ) {
mu <- mod$param[1] + pi ;  rho <- abs( mod$param[2] )
}
n <- length(x)
sum( log1p( 2 * rho * cos(x - mu) ) ) - n * log(2 * pi)
mu
rho
x <- rcardioid(1000, -3, 0.3)
mod <- cardio.mle(x, T)
mod
x <- rcardioid(1000, -3, 0.3)
mod <- cardio.mle(x, T)
mod
mu <- mod$param[1] ;  rho <- mod$param[2]
if ( mod$param[2] < 0 ) {
mu <- mod$param[1] + pi ;  rho <- abs( mod$param[2] )
}
n <- length(x)
sum( log1p( 2 * rho * cos(x - mu) ) ) - n * log(2 * pi)
mu
rho
source("~/GitHub/Directional/R/cardio.mle.R")
x <- rcardioid(1000, -3, 0.3)
mod <- cardio.mle(x, T)
source("~/GitHub/Directional/R/cardio.mle.R")
source("~/GitHub/Directional/R/cardio.mle.R")
cardio.mle <- function(x, rads = FALSE) {
if ( !rads )   x <- x * pi/180
cardio <- function(para, x) {
rho <- 0.5 * cos( para[1] )
mu <- para[2] %% pi
- sum( log1p( 2 * rho * cos(x - mu) ) )
}
mod <- optim( c( runif(1, 0, 0.5), mean(x) ), cardio, x = x, control = list(maxit = 5000) )
rho <- 0.5 * cos( mod$par[1] )
mu <- mod$par[2] %% pi
if ( rho < 0 )  mu <- mu + pi ;  rho <- abs(rho)
param <- c(mu, rho)
names(param) <- c("mu", "rho")
n <- length(x)
list( loglik = -n * log(2 * pi) - mod$value, param = param)
}
x <- rcardioid(1000, -3, 0.3)
cardio.mle(x, T)
seq(2*pi/100, 2*pi-2*pi/100, 2*pi/100)
#-------------------------------------------------------------------
mle.cardioid <- function(t) {
#-------------------------------------------------------------------
# Returns ML estimates of mu and rho for an assumed cardioid
# distribution.
# Initial grid search is over internal part of the parameter space.
# Use llgrid.cardioid for the log-likelihood over a grid spanning the
# whole of the parameter space.
n <- length(t)
if (n == 1) {
muhat <- t[1] ; rhohat <- 0.5
maxll <- log((1+2*rhohat*cos(t-muhat))/(2*pi))
} else if (n == 2) {
zbar <- sum(exp((1i)*t))/n ; muhat <- Arg(zbar)%%(2*pi) ; rhohat <- 0.5
maxll <- sum(log((1+2*rhohat*cos(t-muhat))/(2*pi)))
} else {
muval <- seq(2*pi/100, 2*pi-2*pi/100, 2*pi/100) ; rhoval <- seq(0.5/50,0.5-0.5/50,0.5/50)
nt1 <- length(muval) ; nt2 <- length(rhoval) ; ind <- 0 ; ll <- 0 ; llmax <- -9e20
for (i in 1:nt2) { rhov <- rhoval[i]
for (j in 1:nt1) { muv <- muval[j] ; ind <- ind+1
ll[ind] <- sum(log((1+2*rhov*cos(t-muv))/(2*pi)))
if (ll[ind] > llmax) {
llmax <- ll[ind] ; mumax <- muv ; rhomax <- rhov
}
} }
cardnlik <- function(para, t) {
mu <- para[1] ; rho <- para[2]
-sum(log((1+2*rho*cos(t-mu))/(2*pi)))
}
mlesoln <- nlminb(c(mumax,rhomax), function(x) cardnlik(x,t), control=list(maxit=500), lower=c(mumax-pi,0), upper=c(mumax+pi,0.5))
maxll <- -mlesoln$objective ; muhat <- mlesoln$par[1]%%(2*pi) ; rhohat <- mlesoln$par[2]
}
res <- c(maxll, muhat, rhohat)
return(res)
}
x <- rcardioid(1000, -3, 0.3)
cardio.mle(x, T)
mle.cardioid(x)
source("~/GitHub/Directional/R/kuiper.R")
library(Directional)
?kuiper
x <- rvonmises(n = 40, m = 2, k = 10)
kuiper(x, rads = TRUE)
watson(x, rads = TRUE)
x <- rvonmises(n = 40, m = 2, k = 10)
a<-kuiper(x, rads = TRUE)
watson(x, rads = TRUE)
a$statistic
